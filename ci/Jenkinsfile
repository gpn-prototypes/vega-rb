withFolderProperties{
    MASTER = "${env.K8S_MASTER}"
    TECH_USER = "${env.TECH_USER}"
}

pipeline {

    agent any


    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        skipDefaultCheckout()
    }

    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'jenkins-deploy', name: 'BRANCH_APP', type: 'PT_BRANCH', selectedValue: 'DEFAULT', listSize: '10', useRepository: '${scm.userRemoteConfigs[0].url}'
        choice(
            name: 'STAND',
            choices: ['demo','qa','dev','1','2','3','4','5','6','7','8','9','10'],
            description: "Choose STAND for deploy"
        )
    }

    environment {
        DOCKER_REGISTRY = 'docker-gpn.nexign.com/gpnx/vg1/frontend'
        DOCKER_FILE = 'docker/Dockerfile'
    }

    stages {

        stage("GIT checkout") {
            steps {
                echo "================== GIT checkout =================="
                git branch: "${params.BRANCH_APP}", credentialsId: "ARTIFACTORY", url: "${scm.userRemoteConfigs[0].url}"
            }
        }

        stage("Set build name") {
            steps {
                echo "================== Set Build name =================="
                wrap([$class: 'BuildUser']){
                    script {
                        env.GIT_COMMIT_SHORT = sh (
                            script: "printf \$(git rev-parse --short HEAD)",
                            returnStdout: true
                        )
                        // buildName "#$BUILD_NUMBER-$GIT_COMMIT_SHORT"
                        buildName "#$BUILD_NUMBER-${params.BRANCH_APP}"
                        buildDescription "Executed @ ${NODE_NAME}. Build started by ${BUILD_USER}"
                    }
                }
            }
        }

        stage("Build docker image") {
            steps {
                echo "================== Build Docker image =================="
                script {
                    docker.withRegistry("https://$DOCKER_REGISTRY", "ARTIFACTORY") {
                        dockerImage = docker.build("$DOCKER_REGISTRY:$GIT_COMMIT_SHORT", "-f $DOCKER_FILE .")
                    }
                }
            }
        }

        stage("Push docker image") {
            steps {
                echo "================== Push Docker image =================="
                script {
                    docker.withRegistry("https://$DOCKER_REGISTRY", "ARTIFACTORY") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage("Helm install app (front)") {
            steps {
                echo "================== Deploy to K8S =================="
                sshagent(credentials: ["K8SHelmSSHKey"]) {
                    sh """
                    ssh -o StrictHostKeyChecking=no $TECH_USER@$MASTER helm repo update
                    ssh -o StrictHostKeyChecking=no $TECH_USER@$MASTER helm upgrade --install vega1-front-$STAND \
                        --wait \
                        --namespace vega-$STAND \
                        --set image.tag="$GIT_COMMIT_SHORT" \
                        --set ingress.hostName="vg1-front-$STAND" \
                        chartmuseum/vega1-front
                    """
                }

            }
        }
    }

    post {
        always {
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
                notifyBitbucket()
            }
            // Workspace Cleanup after build
            cleanWs()
        }
    }

}
