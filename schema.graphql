schema {
  query: ResourceBaseQueries
  mutation: ResourceBaseMutations
}

type Attribute {
  code: String!
  name: String!
  shortName: String!
  units: String!
}

input AttributeInput {
  code: String!
  name: String!
  shortName: String!
  units: String!
}

union CalculatedOrError = CalculationResult | TableErrors | DistributionDefinitionErrors

type CalculationResult {
  resultId: ID
}

type Conception {
  name: String!
  description: String!
  probability: Float
  structure: ProjectStructure!
}

input ConceptionInput {
  name: String!
  description: String!
  probability: Float
  structure: ProjectStructureInput!
}

type DetailError implements RBErrorInterface {
  code: RBErrorCodes!
  message: String!
  details: String
}

type Distribution {
  type: DistributionTypes!
  definition: DistributionDefinitionTypes!
  parameters: [DistributionParameter]!
}

type DistributionChart {
  pdf: [Point!]!
  sf: [Point!]!
  percentiles: [Percentile!]!
  visiblePercentile: Percentile!
}

union DistributionChartResult = DistributionChart | DistributionDefinitionErrors

type DistributionDefinitionError implements RBErrorInterface {
  code: RBErrorCodes!
  message: String!
  fields: [String!]!
}

type DistributionDefinitionErrors {
  errors: [DistributionDefinitionError!]!
}

enum DistributionDefinitionTypes {
  MEAN_SD
  MIN_MAX
  LOCATION_LOGMEAN_LOGSD
  LOCATION_GEOMMEAN_GEOMSD
  LOCATION_ARMEAN_ARSD
  MODE_MIN_MAX
  ALPHA_BETA_MIN_MAX
  TWO_PERCENTILES
  THREE_PERCENTILES
  FOUR_PERCENTILES
  MEAN_ONE_PERCENTILE
  LOCATION_TWO_PERCENTILES
  LOCATION_MEAN_ONE_PERCENTILE
  MEAN_TWO_PERCENTILES
  MODE_TWO_PERCENTILES
  MIN_MAX_TWO_PERCENTILES
}

input DistributionInput {
  type: DistributionTypes!
  definition: DistributionDefinitionTypes!
  parameters: [DistributionParameterInput]!
  minBound: Float
  maxBound: Float
}

type DistributionParameter {
  type: DistributionParameterTypes!
  value: Float!
}

input DistributionParameterInput {
  type: DistributionParameterTypes!
  value: Float!
}

enum DistributionParameterTypes {
  MEAN
  SD
  MIN
  MAX
  LOCATION
  MODE
  LOGMEAN
  LOGSD
  GEOMMEAN
  GEOMSD
  ARMEAN
  ARSD
  ALPHA
  BETA
  Q1_RANK
  Q2_RANK
  Q3_RANK
  Q4_RANK
  Q1_VALUE
  Q2_VALUE
  Q3_VALUE
  Q4_VALUE
}

type DistributionQueries {
  distributionChart(distribution: DistributionInput!, visibleRank: Int): DistributionChartResult
}

enum DistributionTypes {
  NORMAL
  LOGNORMAL
  TRIANGULAR
  UNIFORM
  BETA
  PERT
}

type DomainObject {
  domainObjectPath: [String!]!
  geoObjectCategory: GeoObjectCategories!
  risksValues: [Float]!
  visible: Boolean!
  attributeValues: [Distribution]!
}

input DomainObjectInput {
  domainObjectPath: [String!]!
  geoObjectCategory: GeoObjectCategories!
  risksValues: [Float]!
  visible: Boolean!
  attributeValues: [DistributionInput]!
}

type GCoSCalculationResult {
  GCoSValues: [Float]
  errors: [TableError!]
}

enum GeoObjectCategories {
  RESERVES
  RESOURCES
}

type Percentile {
  point: Point!
  rank: Int!
}

type Point {
  x: Float!
  y: Float!
}

type ProjectQueries {
  template: RBProject
  validateBeforeLoad(project: RBProjectInput!): [DetailError!]
  loadFromDatabase: RBProject
}

type ProjectStructure {
  domainEntities: [RBDomainEntity!]!
  attributes: [Attribute!]!
  risks: [Risk!]!
  domainObjects: [DomainObject!]!
}

input ProjectStructureInput {
  domainEntities: [RBDomainEntityInput!]!
  attributes: [AttributeInput!]!
  risks: [RiskInput!]!
  domainObjects: [DomainObjectInput!]!
}

type RBDomainEntity {
  name: String!
  icon: RBDomainEntityIcons!
}

enum RBDomainEntityIcons {
  LICENSING_ROUND_ICON
  FIELD_ICON
  FORMATION_ICON
  OIL_POOL_ICON
  WELL_ICON
}

input RBDomainEntityInput {
  name: String!
  icon: RBDomainEntityIcons!
  visible: VisibleInput
}

enum RBErrorCodes {
  INCORRECT_PROJECT_STRUCTURE
  EMPTY_CELL_IN_TABLE_DATA
  IDENTICAL_ROW_IN_TABLE_DATA
  INCORRECT_FILE_VERSION
  DISTRIBUTION_PARAMETERS_INCORRECT_RELATION
  DISTRIBUTION_PARAMETER_OUT_OF_RANGE
  CELL_VALUE_IS_NULL
  INVALID_PROBABILITY_VALUE
  INCORRECT_PARAMETER_VALUE_FOR_DEFINITION
  QUANTILES_MUST_BE_DESCENDING
  QUANTILE_RANKS_MUST_BE_ASCENDING
  CONCEPTION_PROBABILITY_IS_NONE
  DUPLICATING_CONCEPTIONS_NAMES
}

interface RBErrorInterface {
  code: RBErrorCodes!
  message: String!
}

type RBProject {
  version: String!
  conceptions: [Conception!]!
}

input RBProjectInput {
  version: String!
  conceptions: [ConceptionInput!]!
}

type ResourceBaseMutations {
  updateRiskValue(projectStructure: ProjectStructureInput!): UpdateRiskValueResult
  calculateProject(projectInput: RBProjectInput!): CalculatedOrError
  saveProject(projectInput: RBProjectInput!): SavedOrError
}

type ResourceBaseQueries {
  project: ProjectQueries
  distribution: DistributionQueries
}

type Risk {
  code: String!
  name: String!
}

input RiskInput {
  code: String!
  name: String!
}

union SavedOrError = TableErrors | DistributionDefinitionErrors

type TableError implements RBErrorInterface {
  code: RBErrorCodes!
  message: String!
  tableName: TableNames!
  column: Int
  row: Int
}

type TableErrors {
  errors: [TableError!]!
}

enum TableNames {
  CONCEPTIONS
  DOMAIN_ENTITIES
  ATTRIBUTES
  RISKS
}

union UpdateRiskValueResult = GCoSCalculationResult | DetailError

input VisibleInput {
  table: Boolean!
  tree: Boolean!
  calc: Boolean!
}
